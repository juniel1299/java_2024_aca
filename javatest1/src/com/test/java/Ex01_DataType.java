package com.test.java;

public class Ex01_DataType {
	public static void main(String[] args) {

		/*
		  새로운 언어 > 자료형 >
		 
		  자바의 자료형 , Data Type 
		  데이터 (자료) 의 형태
		  데이터의 길이(범위)와 생김새를 미리 정의하고, 그 정의에 따라 분류해놓은
		  규칙
		  
		  초등학교 - 100, 200, 300 > 정수 - 3.14, 5.64, 2.22 > 실수 - 홍길동, 자바, 컴퓨터 > 문자
		  
		  자바의 자료형의 기준
		   1. 형태 2. 길이
		  
		  자료형 분류 1. 기본형, 원시형 (Primitive Type) , 값형(Value Type) 
		  - 8가지 ( byte, short,
		  int, long, float, double, char, boolean)
		 
		  a. 숫자형
		  	1. 정수형 [bit 기준으로 분류] (디지털 논리회로 내용 참고, 2의보수, )
		  		a. byte 
		  			- 1byte (8bit) 
		  			경우의 수 2^8 = 255 (256 이지만 0 포함하여 -1 함 ) 
		  			-128 ~ 127
		  		b. short
		  			- 2byte (16bit)
		  			- 2^16 = 65535
		  			- -32768 ~ 32767
		  		c. int
		  			- 4byte (32bit)
		  			- 2^32 =
		  			- -21억 ~ 21억
		  		d. long
		  			- 8byte (64bit)
		  			- 2^64 =
		  			- -922경 ~ 922경
		  		자바에선 최소 8비트부터 (1 byte) 받을 수 있음. 
		  		첫번째 비트를 부호[0은 양수로 표기, 1은 음수, 0을 표현할때 양수로 분류] 
		  		, 나머지 비트를 데이터 비트로 사용
		  		-128 ~ 127까지 표기가 가능.
		  	2. 실수형 [부호, 가수부, 지수부로 나뉨 e-1 즉 소수점 위치를 나타내는 형태를 지수부로 보냄]
		  		a. float
		  			- 4byte
		  			- 무한대
		  			- 지수 (8bit) + 가수(23bit)
		  			- 정수 + 소수점 이하 6~7자리를 유효하게 표현
		  			- 단정도형
		  			
		  		b. double
		  			- 8byte
		  			- 무한대
		  			- 지수(11bit) + 가수(51bit) 
		  			- 정수 + 소수점 이하 15~16자리를 유효하게 표현 
		  			- 배정도형
		  			
		  		고정소수점 방식
		  		 - 12.345
		  		
		  		부동소수점 방식
		  		- 1.23x2e-1
		  		
		  		3457906891249012940 식으로 나오면 앞에서 잘라버림
		  		ex) 34579068912 x 10^8 
		  		손실이 발생함
		  		
		  b. 문자형
		  	1. 문자형
		  		a. char
		  			- 2byte 
		  			- 숫자형(정수형) [아스키 코드]
		  			- 0 ~ 65535까지 표현 (음수 x)
		  			- 음수 없음 (부호 비트 x)
		  			- 유니코드 (unicode)
		  			
		  c. 논리형
		  	1. 논리형
		  		a. boolean
		  			- 1byte
		 			- 참(ture), 거짓(false)
		 			
		 			
		  2. 참조형(Referance Type) - 클래스(class) > 사용자가 정의 가능 - 배열(Array) - 열거형(Enum) -
		  인터페이스(Interface)
		  
		  
		  
		 */
	}
}
